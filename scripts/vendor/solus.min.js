"use strict";function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach(function(c){_defineProperty(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}const SOLUS=new function(){const a=!0;this.init=()=>{this.loaderInstances=[],this.doExports(),this.checkPixi(),e.log("%c Solus - v".concat("1.0"," "),"background: #5f00c4; color: #ffffff; font-size: 15px;")},this.doExports=()=>{this.Logger=e,this.Loader=b,this.Sprite=new c,this.SpriteHelper=this.Sprite},this.checkPixi=()=>{try{PIXI}catch(a){throw Error("PixiJS (PIXI) is not loaded or is not available. Make sure SOLUS is loaded *after* Pixi.")}};const b=class{constructor(a){e.log("New Solus Loader initiated"),SOLUS.loaderInstances.push(this),this.basePath=a+""||"",this.pixiLoader=new PIXI.Loader(this.basePath),this.resources=this.pixiLoader.resources,this.onProgressFunc=null,this.onLoadErrorFunc=null,this.onLoadFileFunc=null,this.onCompleteFunc=null,this.loadQueue=[],this.loadedFiles=[],this.setupPixiListeners()}setupPixiListeners(){this.pixiLoader.onProgress.add(this.internal_onProgress.bind(this)),this.pixiLoader.onError.add(this.internal_onError.bind(this)),this.pixiLoader.onLoad.add(this.internal_onLoadFile.bind(this)),this.pixiLoader.onComplete.add(this.internal_onComplete.bind(this)),this.pixiLoader.pre(this.internal_onPreMiddleware.bind(this)),this.pixiLoader.use(this.internal_onUseMiddleware.bind(this))}add(a){if(!Array.isArray(a))return e.error("ERROR: Loader.add invalid param",a);for(const b of a)null!=b.key&&null!=b.directory&&(this.loadQueue.push(b),this.pixiLoader.add(b.key,b.directory))}on(a,b){"string"==typeof a&&"function"==typeof b&&("progress"===a?this.onProgressFunc=b:"error"===a?this.onLoadErrorFunc=b:"load"===a?this.onLoadFileFunc=b:"complete"===a?this.onCompleteFunc=b:void 0)}internal_onPreMiddleware(a,b){e.verbose("SOLUS.internal_onPreMiddleware()"),b()}internal_onUseMiddleware(a,b){e.verbose("SOLUS.internal_onUseMiddleware()"),b()}internal_onProgress(a){e.verbose("SOLUS.internal_onProgress()"),"function"==typeof this.onProgressFunc&&this.onProgressFunc.bind(this)(a)}internal_onError(a){e.verbose("SOLUS.internal_onError()"),"function"==typeof this.onLoadFileFunc&&this.onLoadFileFunc.bind(this)(a)}internal_onLoadFile(a,b){e.verbose("SOLUS.internal_onLoadFile()");const c=b.url;this.loadedFiles.push(c),"function"==typeof this.onLoadFileFunc&&this.onLoadFileFunc.bind(this)(a)}internal_onComplete(a){e.verbose("SOLUS.internal_onComplete()"),this.mergeMultiPackTextures(),"function"==typeof this.onCompleteFunc&&this.onCompleteFunc.bind(this)(a)}mergeMultiPackTextures(){for(const a of Object.values(this.resources)){const{name:b,extension:c,data:d}=a;if("json"!==c)continue;if(null==d.meta.related_multi_packs)continue;const e=d.meta.related_multi_packs;if(e)for(let b of e){b=b.replace(".json","");const c=a.spritesheet,d=this.resources[b];c.textures=_objectSpread(_objectSpread({},c.textures),d.textures)}}}eject(){e.log("** \u0D9E **"),e.log("...Solus was not the Impostor...")}load(){this.pixiLoader.load()}},c=class{constructor(){this.sprites=[]}create(a,b){const c=this.getTextureBySpritesheet(a,b),e=new d(this,c);return this.addSprite(e),e}addSprite(a){-1==this.sprites.indexOf(a)||this.sprites.push(a)}removeSprite(a){const b=this.sprites.indexOf(a);-1<b&&this.sprites.splice(b,1)}findLoaderByResource(a){const b=SOLUS.loaderInstances;for(const c of b)if(c.resources[a]!==void 0)return c;return!1}getSpritesheetByName(a){const b=this.findLoaderByResource(a),c=b.resources[a].spritesheet;return c}getTextureBySpritesheet(a,b){const c=this.getSpritesheetByName(a),d=c.textures[b];return d}},d=class extends PIXI.Sprite{constructor(a,b){super(b),this.spriteHelper=a}changeTexture(a,b){const c=SOLUS.Sprite.getTextureBySpritesheet(a,b);c&&(this.texture=c)}},e=class{static log(){a&&console.log(...arguments)}static verbose(){!1&&a&&e.log(...arguments)}static error(){!0&&a&&console.error(...arguments)}};this.init()};
